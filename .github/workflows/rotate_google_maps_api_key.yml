name: Rotate and List Google Maps API Keys

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC time to be consistent across timezone
  workflow_dispatch:

jobs:
  rotate-and-list-keys:
    runs-on: ubuntu-latest
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2.1.0'
        with:
          version: '475.0.0'

      # Retrieve old API key (assuming it's already known which one to rotate)
      - name: Get old API key uid
        id: get-old-key-uid
        run: |
          API_KEYS=$(gcloud services api-keys list --filter="displayName:Google Maps Key" --format="json")
          KEY_COUNT=$(echo "$API_KEYS" | jq length)
          if [ "$KEY_COUNT" -eq 1 ]; then
            OLD_API_KEY_UID=$(echo "$API_KEYS" | jq -r '.[0].uid')
            echo "OLD_API_KEY_UID=$OLD_API_KEY_UID" >> $GITHUB_ENV
            echo "Old API key UID retrieved."
          elif [ "$KEY_COUNT" -eq 0 ]; then
            echo "No existing API key found."
            exit 1
          else
            echo "Error: More than one API key found. Exiting."
            exit 1
          fi

      - name: Generate new API key
        id: create-key
        run: |
          OUTPUT=$(gcloud services api-keys create --display-name="Google Maps Key" --format="value(keyString)" 2>&1)
          JSON=$(echo "$OUTPUT" | sed 's/.*{/{/')
          NEW_API_KEY=$(echo "$JSON" | jq -r '.keyString')
          echo "NEW_API_KEY=$NEW_API_KEY" >> $GITHUB_ENV
          echo "New API key generated."

      # Store the new API key in Azure Key Vault
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set new API key in Azure Key Vault
        run: |
          if [ -z "$NEW_API_KEY" ]; then
            echo "Error: NEW_API_KEY is empty."
            exit 1
          else
            az keyvault secret set --vault-name GMapsKeyVault --name GoogleMapKey --value "$NEW_API_KEY" > /dev/null
            echo "New API key stored in Azure Key Vault."
          fi

      # List all Google Maps API keys after creating new one
      - name: List all API keys
        run: |
          API_KEYS_JSON=$(gcloud services api-keys list --filter="displayName:Google Maps Key" --format="json")
          echo "$API_KEYS_JSON" | jq '.'
          echo "::set-output name=api_keys::$API_KEYS_JSON"

      # Delete the old API key by uid
      - name: Delete old API key by uid
        if: env.OLD_API_KEY_UID != ''
        run: |
          # Delete the old API key
          gcloud services api-keys delete $OLD_API_KEY_UID > /dev/null 2>&1

          echo "Old API key deleted"