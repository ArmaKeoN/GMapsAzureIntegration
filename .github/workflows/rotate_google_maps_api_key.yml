name: Rotate and List Google Maps API Keys

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:

jobs:
  rotate-and-list-keys:
    runs-on: ubuntu-latest
    steps:
      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          export_default_credentials: true

      # Retrieve the existing API key (assuming it's already known which one to rotate)
      - name: Get existing API key
        id: get-keys
        run: |
          API_KEYS=$(gcloud services api-keys list --filter="displayName:Google Maps Key" --format="json")
          if [ "$(echo "$API_KEYS" | jq length)" -gt 0 ]; then
            OLD_API_KEY_UID=$(echo "$API_KEYS" | jq -r '.[0].uid')
            echo "OLD_API_KEY_UID=$OLD_API_KEY_UID" >> $GITHUB_ENV
          else
            echo "No existing API key found."
          fi

      # Generate a new API key
      - name: Generate new API key
        id: create-key
        run: |
          gcloud services api-keys create --display-name="Google Maps Key"

      # Retrieve new API key path
      - name: Get new API key path
        id: get-key-path
        run: |
          API_KEYS=$(gcloud services api-keys list --filter="displayName:Google Maps Key" --format="json")
          if [ "$(echo "$API_KEYS" | jq length)" -gt 0 ]; then
            NEW_API_KEY_UID=""
            for key in $(echo "$API_KEYS" | jq -r '.[] | .uid'); do
              if [ -z "$OLD_API_KEY_UID" ]; then
                NEW_API_KEY_UID=$key
                break
              elif [ "$key" != "$OLD_API_KEY_UID" ]; then
                NEW_API_KEY_UID=$key
                break
              fi
            done
            if [ -n "$NEW_API_KEY_UID" ]; then
              NEW_API_KEY_PATH=$(echo "$API_KEYS" | jq -r --arg uid "$NEW_API_KEY_UID" '.[] | select(.uid == $uid) | .name')
              echo "NEW_API_KEY_PATH=$NEW_API_KEY_PATH" >> $GITHUB_ENV
            else
              echo "No new API key found with a different UID than the old one."
            fi
          else
            echo "No existing API key found."
          fi

      # Extract the api key from the key value pair
      - name: Extract new API key
        id: extract-new-key
        run: |
          NEW_API_KEY=$(gcloud services api-keys get-key-string $NEW_API_KEY_PATH --format=json | jq -r '.keyString')
          echo "NEW_API_KEY=$NEW_API_KEY" >> $GITHUB_ENV

      # Store the new API key in Azure Key Vault
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set new API key in Azure Key Vault
        run: |
          az keyvault secret set --vault-name YourKeyVaultName --name GoogleMapKey --value $NEW_API_KEY
          echo "New API key stored in Azure Key Vault"

      # List all Google Maps API keys after creating new one
      - name: List all API keys
        run: |
          API_KEYS_JSON=$(gcloud services api-keys list --filter="displayName:Google Maps Key" --format="json")
          echo "$API_KEYS_JSON" | jq '.'
          echo "::set-output name=api_keys::$API_KEYS_JSON"

      # Optional: Disable or delete the old API key
      - name: Disable old API key
        if: env.API_KEY_NAME != ''
        run: |
          gcloud services api-keys disable $API_KEY_NAME --quiet
          echo "Old API key disabled"
