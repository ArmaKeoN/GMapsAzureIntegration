name: Rotate Google Maps API Key

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:

jobs:
  rotate-key:
    runs-on: ubuntu-latest
    steps:
      # - name: Decode GCP Service Account Credentials
      #   run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 --decode > gcp-key.json
      #   shell: bash

      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          export_default_credentials: true

      # Retrieve the existing API key (assuming it's already known which one to rotate)
      - name: Get existing API keys
        id: get-keys
        run: |
          # List keys and filter for the specific API key
          API_KEY_NAME=$(gcloud services api-keys list --filter="displayName:Google Maps Key" --format="value(name)")
          echo "API_KEY_NAME=$API_KEY_NAME" >> $GITHUB_ENV

      # Generate a new API key
      - name: Generate API key and capture JSON
        id: generate_key
        run: |
          API_KEY_JSON=$(gcloud services api-keys create --display-name="Google Maps Key" --format=json)
          echo "API_KEY_JSON=$API_KEY_JSON" >> $GITHUB_ENV
        shell: /usr/bin/bash -e
        env:
          CLOUDSDK_METRICS_ENVIRONMENT: github-actions-setup-gcloud
      
      - name: Extract keyString and set as env var
        run: |
          KEY_STRING=$(echo $API_KEY_JSON | jq -r '.keyString')
          echo "NEW_API_KEY=$KEY_STRING" >> $GITHUB_ENV
        shell: /usr/bin/bash -e

      # Debugging: Print the value of NEW_API_KEY
      - name: Print NEW_API_KEY for debugging
        run: echo "NEW_API_KEY is ${{ env.NEW_API_KEY }}"

      # Store the new API key in Azure Key Vault
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set new API key in Azure Key Vault
        run: |
          az keyvault secret set --vault-name GMapsKeyVault --name GoogleMapKey --value "${{ env.NEW_API_KEY }}"
          echo "New API key stored in Azure Key Vault"

      # Optional: Disable or delete the old API key
      - name: Disable old API key
        if: env.API_KEY_NAME != ''
        run: |
          gcloud services api-keys disable $API_KEY_NAME --quiet
          echo "Old API key disabled"
